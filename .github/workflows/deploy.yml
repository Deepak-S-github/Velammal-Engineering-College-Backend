name: üöÄ Auto Deploy to EC2 on Main Push

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout Code
        uses: actions/checkout@v3

      - name: üîê Setup SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: üöÄ SSH into EC2 and Run Deployment (No .env)
        env:
          REPO_URL: "https://github.com/SAMSDP/VEC_Landing.git"
          MONGO_URI: ${{ secrets.MONGO_URI }}
          DB_NAME: ${{ secrets.DB_NAME }}
          CHAT_DB_NAME: ${{ secrets.CHAT_DB_NAME }}
          PORT: ${{ secrets.PORT }}
          BASE_EMAIL: ${{ secrets.BASE_EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          TARGET_EMAIL: ${{ secrets.TARGET_EMAIL }}
          ICELL_TARGET_EMAIL: ${{ secrets.ICELL_TARGET_EMAIL }}
          GROQ_API_KEY_1: ${{ secrets.GROQ_API_KEY_1 }}
          GROQ_API_KEY_2: ${{ secrets.GROQ_API_KEY_2 }}
          GROQ_API_KEY_3: ${{ secrets.GROQ_API_KEY_3 }}
          GROQ_API_KEY_4: ${{ secrets.GROQ_API_KEY_4 }}
          GROQ_API_KEY_5: ${{ secrets.GROQ_API_KEY_5 }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_NAME: ${{ secrets.AWS_S3_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_HOST }} <<'EOF'
          set -xe

          echo "üöÄ Starting Safe Deployment..."

          CLONE_DIR="$HOME/VEC_Landing"
          FRONTEND_DIR="$CLONE_DIR/Frontend"
          BACKEND_DIR="$CLONE_DIR/Backend"
          FRONTEND_TARGET="/var/www/html/Frontend"
          BACKEND_TARGET="/var/www/Backend"

          echo "üßπ Cleaning old repo if exists..."
          rm -rf "$CLONE_DIR"

          echo "üì• Cloning latest repo..."
          git clone "${REPO_URL}" "$CLONE_DIR"

          echo "üì¶ Installing Frontend Dependencies..."
          cd "$FRONTEND_DIR"
          npm install --legacy-peer-deps

          echo "üìÑ Writing frontend .env inline..."
          echo "REACT_APP_BASE_URL=${REACT_APP_BASE_URL}" > .env

          echo "üèóÔ∏è  Building React App..."
          npm run build

          echo "üõë Stopping PM2 Backend if running..."
          pm2 stop server.js || true

          echo "üì¶ Installing Backend Dependencies..."
          cd "$BACKEND_DIR"
          npm install --legacy-peer-deps

          echo -e "\nüìÑ Writing backend .env..."
          cat <<ENVB > .env
MONGO_URI=${MONGO_URI}
DB_NAME=${DB_NAME}
CHAT_DB_NAME=${CHAT_DB_NAME}
PORT=${PORT}
BASE_EMAIL=${BASE_EMAIL}
PASSWORD=${PASSWORD}
TARGET_EMAIL=${TARGET_EMAIL}
ICELL_TARGET_EMAIL=${ICELL_TARGET_EMAIL}
GROQ_API_KEY_1=${GROQ_API_KEY_1}
GROQ_API_KEY_2=${GROQ_API_KEY_2}
GROQ_API_KEY_3=${GROQ_API_KEY_3}
GROQ_API_KEY_4=${GROQ_API_KEY_4}
GROQ_API_KEY_5=${GROQ_API_KEY_5}
AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
AWS_S3_NAME=${AWS_S3_NAME}
AWS_REGION=${AWS_REGION}
ENVB

          echo "üîÅ Replacing Frontend..."
          sudo rm -rf "$FRONTEND_TARGET"
          sudo mv "$FRONTEND_DIR" "$FRONTEND_TARGET"

          echo "üîÅ Replacing Backend..."
          sudo rm -rf "$BACKEND_TARGET"
          sudo mv "$BACKEND_DIR" "$BACKEND_TARGET"

          echo "üöÄ Restarting PM2 Backend..."
          cd "$BACKEND_TARGET"
          pm2 start server.js || pm2 restart server.js
          pm2 save

          echo "üîÑ Restarting NGINX..."
          sudo systemctl restart nginx

          echo "‚úÖ Deployment Complete Successfully!"
          EOF
